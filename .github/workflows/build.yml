name: "Build Package"
on:
  repository_dispatch:
  workflow_dispatch:

jobs:
  buildFlakePackage:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    continue-on-error: true

    env:
      FLAKE_PKG_TEMPLATE: '.#packages.${ARCH}-${SYSTEM}.wireproxy${CROSS_OPT}'
      FLAKE_CROSS_TEMPLATE: '-cross-${CROSS_ARCH}'

    steps:
      - uses: actions/checkout@v3

      - name: Checkout wireproxy code
        uses: actions/checkout@v3
        with:
          ref: z/cf
          path: src

      - name: Checkout wireguard go code
        uses: actions/checkout@v3
        with:
          repository: tywtyw2002/wireguard-go
          ssh-key: ${{ secrets.WG_SSH_KEY }}
          ref: z/feat-cf-fix
          path: src/_lib/wireguard-mod

      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v24
        with:
          nix_conf: |
            build-users-group =
            experimental-features = nix-command flakes
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org https://cache.garnix.io https://c70-build-cache.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= c70-build-cache.cachix.org-1:SrMlvWjLFODtcHEfCGy9O4/YtjMvAZOnAdpTChlR+/I=

      - name: Pre-build patch
        run: |
          sed -i -e "s|/Users/tyw/git/wireguard-go|./_lib/wireguard-mod|" src/go.mod
          wget https://github.com/tywtyw2002/nix-repo/raw/master/flake.lock
          rm -rf .git
          nix flake metadata
          nix-env -iA cachix -f https://cachix.org/api/v1/install
          nix-env -iA jq -f https://github.com/tywtyw2002/nx-direct/tarball/nx

      - name: Generate Flake Package Path
        run: |
          SYSTEM="linux"
          ARCH="x86_64"
          CROSS_ARCH="aarch64"
          if [ "${{ runner.os }}" == "macOS" ]; then
            SYSTEM="darwin"
          fi
          FLAKE_PKG_PATH=${{env.FLAKE_PKG_TEMPLATE}}
          CROSS_OPT=${{env.FLAKE_CROSS_TEMPLATE}}
          FLAKE_CROSS_PKG_PATH=${{env.FLAKE_PKG_TEMPLATE}}

          echo "::group::[Info] Flake Path"
          echo "FLAKE_PKG_PATH=$FLAKE_PKG_PATH"
          echo "FLAKE_PKG_PATH=$FLAKE_PKG_PATH" >> $GITHUB_ENV
          echo "FLAKE_CROSS_PKG_PATH=$FLAKE_CROSS_PKG_PATH"
          echo "FLAKE_CROSS_PKG_PATH=$FLAKE_CROSS_PKG_PATH" >> $GITHUB_ENV
          echo "FLAKE_SYSTEM=$SYSTEM" >> $GITHUB_ENV
          echo "::endgroup"

      - name: Check Wireproxy Cache
        id: check_cache
        run: |
          hash=$(basename $(nix eval ${{env.FLAKE_PKG_PATH}} --raw ) | cut -d "-" -f 1)
          cache_status=$(curl -s -o /dev/null -w "%{http_code}" -I https://${{ secrets.CACHIX_REPO }}.cachix.org/${hash}.narinfo)
          if [ "$cache_status" != "200" ]; then
            echo "NEED_BUILD=1" >> $GITHUB_OUTPUT
          fi

      - name: Build Wireproxy
        if: ${{ steps.check_cache.outputs.NEED_BUILD }}
        continue-on-error: true
        env:
          CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
        run: |
          nix build ${{env.FLAKE_PKG_PATH}}
          nix path-info ${{env.FLAKE_PKG_PATH}} | cachix push ${{ secrets.CACHIX_REPO }}

      - name: Output Build Info -> Toml
        run: |
          SYSTEM="x86_64-${{env.FLAKE_SYSTEM}}"
          echo "[${SYSTEM}]" >> results.toml
          nix eval --json "${{ env.FLAKE_PKG_PATH }}" \
            --apply "x: {name=x.name; pname=x.pname; path=x.outPath; version=x.version; system=\"${SYSTEM}\";}" \
            | jq -r 'to_entries|map("\(.key) = \"\(.value|tostring)\"")|.[]' >> results.toml
          echo "" >> results.toml

      - name: Check Wireproxy CrossPkgs Cache
        id: check_cache_cross
        run: |
          hash=$(basename $(nix eval ${{env.FLAKE_CROSS_PKG_PATH}} --raw ) | cut -d "-" -f 1)
          cache_status=$(curl -s -o /dev/null -w "%{http_code}" -I https://${{ secrets.CACHIX_REPO }}.cachix.org/${hash}.narinfo)
          if [ "$cache_status" != "200" ]; then
            echo "NEED_BUILD=1" >> $GITHUB_OUTPUT
          fi

      - name: Build Wireproxy CrossPkgs
        if: ${{ steps.check_cache_cross.outputs.NEED_BUILD }}
        continue-on-error: true
        env:
          CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
        run: |
            nix build ${{env.FLAKE_CROSS_PKG_PATH}} || on_err=true
            # Upload cross golang
            nix eval ${{env.FLAKE_CROSS_PKG_PATH}}.go --raw | cachix push c70-build-cache
            # upload cache
            [ "$on_err" != "true" ] && \
              nix path-info ${{env.FLAKE_CROSS_PKG_PATH}} | cachix push ${{ secrets.CACHIX_REPO }} \
              || exit 1

      - name: Output Cross Build Info -> Toml
        run: |
          SYSTEM="aarch64-${{env.FLAKE_SYSTEM}}"
          echo "[${SYSTEM}]" >> results.toml
          nix eval --json "${{ env.FLAKE_CROSS_PKG_PATH }}" \
            --apply "x: {name=x.name; pname=x.pname; path=x.outPath; version=x.version; system=\"${SYSTEM}\";}" \
            | jq -r 'to_entries|map("\(.key) = \"\(.value|tostring)\"")|.[]' >> results.toml
          echo "" >> results.toml

      - run: |
          mkdir -p build/wireproxy
          cp results.toml build/wireproxy/${{matrix.os}}_results.toml
          ls -R build

      - name: Post Toml Artifact
        uses: actions/upload-artifact@v3
        with:
          name: cahced_toml_results
          path: ./build/

  uploadBuildResults:
    runs-on: ubuntu-latest
    needs:
      - buildFlakePackage

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: cahced_toml_results
          path: ./build/

      - name: Generate Packages Results
        run: |
          mkdir results
          for d in ./build/*; do
            pkg_name=$(basename $d)
            cat $d/*.toml > ./results/$pkg_name.toml
          done

      - name: Upload merged toml
        uses: actions/upload-artifact@v3
        with:
          name: packages_toml
          path: ./results/

  nixPullRequests:
    runs-on: ubuntu-latest
    needs:
      - uploadBuildResults

    steps:
      - uses: actions/checkout@v3

      - name: Checkout Artifact
        uses: actions/download-artifact@v3
        with:
          name: packages_toml
          path: ./results/

      - name: Checkout nix repo
        uses: actions/checkout@v3
        with:
          repository: tywtyw2002/nix-repo
          token: ${{ secrets.PAT_TOKEN }}
          path: ./work_dir/nix-repo

      - name: Update Wireproxy Toml
        run: |
          mkdir -p ./work_dir/nix-repo/pkgs/wireproxy/
          cp -f ./results/wireproxy.toml ./work_dir/nix-repo/pkgs/z_packages/wireproxy.toml

      # - name: Commit and push changes
      #   uses: stefanzweifel/git-auto-commit-action@v4
      #   with:
      #     repository: ./work_dir/nix-repo
      #     branch: auto_pkgs_hash_update
      #     create_branch: true
      #     commit_message: "chore(auto): update private packages hash."

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          path: ./work_dir/nix-repo
          commit-message: "chore(bot): update private packages hash."
          title: "[Bot] Update packages hash"
          branch: auto_pkgs_hash_update
          base: master
          delete-branch: true
          body: |
            Action Ref:
              - https://github.com/tywtyw2002/wireproxy/actions/runs/${{ github.run_id }}
